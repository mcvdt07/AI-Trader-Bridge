# GitHub with VS Code - Beginner's Guide

## Table of Contents
1. [Prerequisites](#prerequisites)
2. [Initial Setup](#initial-setup)
3. [Working with Your Local Project](#working-with-your-local-project)
4. [Basic GitHub Workflow](#basic-github-workflow)
5. [Common Commands and Operations](#common-commands-and-operations)
6. [VS Code GitHub Integration](#vs-code-github-integration)
7. [Troubleshooting](#troubleshooting)
8. [Best Practices](#best-practices)

## Prerequisites

Before you start, make sure you have:
- VS Code installed on your computer
- Git installed on your system (download from https://git-scm.com/)
- A GitHub account (create one at https://github.com/)
- Your project folder ready on your local machine

## Initial Setup

### 1. Configure Git (First Time Only)
Open VS Code terminal (Terminal → New Terminal) and run:
```
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
```

### 2. Create a GitHub Repository
1. Go to GitHub.com and sign in
2. Click the "+" icon in the top right corner
3. Select "New repository"
4. Name your repository (e.g., "my-project")
5. Choose Public or Private
6. Don't initialize with README if you already have local files
7. Click "Create repository"

### 3. Connect Your Local Project to GitHub

#### Option A: If you already have a local project
1. Open your project folder in VS Code
2. Open the terminal in VS Code
3. Initialize Git in your project:
   ```
   git init
   ```
4. Add your GitHub repository as remote:
   ```
   git remote add origin https://github.com/yourusername/your-repo-name.git
   ```

#### Option B: If starting fresh, clone from GitHub
1. Copy the repository URL from GitHub
2. In VS Code terminal, navigate to where you want the project:
   ```
   cd c:\Users\YourName\Documents\GitHub
   ```
3. Clone the repository:
   ```
   git clone https://github.com/yourusername/your-repo-name.git
   ```
4. Open the cloned folder in VS Code

## Working with Your Local Project

### Understanding Git Status
- **Untracked files**: New files Git doesn't know about yet
- **Modified files**: Existing files that have been changed
- **Staged files**: Files ready to be committed
- **Committed files**: Files saved to Git history

### File States in VS Code
VS Code shows file states with different colors:
- **Green**: New files (untracked)
- **Yellow/Orange**: Modified files
- **Red**: Deleted files
- **White**: No changes

## Basic GitHub Workflow

### 1. Make Changes to Your Files
- Edit, create, or delete files in your project
- VS Code will highlight changed files in the Explorer

### 2. Stage Your Changes
**Using VS Code Interface:**
- Go to Source Control panel (Ctrl+Shift+G)
- Click the "+" next to files you want to stage
- Or click "+" next to "Changes" to stage all files

**Using Terminal:**
```
git add filename.txt          # Stage specific file
git add .                     # Stage all changes
```

### 3. Commit Your Changes
**Using VS Code Interface:**
- In Source Control panel, type a commit message in the text box
- Click the checkmark (✓) or press Ctrl+Enter

**Using Terminal:**
```
git commit -m "Your commit message describing what you changed"
```

### 4. Push to GitHub
**Using VS Code Interface:**
- Click the "..." menu in Source Control panel
- Select "Push" or "Sync Changes"

**Using Terminal:**
```
git push origin main
```

## Common Commands and Operations

### Checking Status
```
git status                    # See what files have changed
git log --oneline            # See commit history
```

### Pulling Latest Changes
If working with others or from multiple computers:
```
git pull origin main         # Get latest changes from GitHub
```

### Creating Branches
```
git checkout -b new-feature  # Create and switch to new branch
git checkout main           # Switch back to main branch
git branch                  # List all branches
```

### Merging Branches
```
git checkout main           # Switch to main branch
git merge new-feature       # Merge your feature branch
```

## VS Code GitHub Integration

### Source Control Panel Features
- **Timeline**: See file history
- **Changes**: View what's modified
- **Staged Changes**: Ready for commit
- **Merge Conflicts**: Resolve conflicts visually

### Useful VS Code Extensions
1. **GitHub Pull Requests and Issues**: Official GitHub extension
2. **GitLens**: Enhanced Git capabilities
3. **Git Graph**: Visualize your Git history

### VS Code Git Features
- **Diff View**: Click on modified files to see changes
- **Blame**: Right-click → "Git: View File History"
- **Merge Conflict Resolution**: Visual tools to resolve conflicts

## Troubleshooting

### Common Issues and Solutions

#### "Authentication failed"
- Set up Personal Access Token on GitHub
- Go to GitHub → Settings → Developer settings → Personal access tokens
- Use token as password when prompted

#### "Repository not found"
- Check the remote URL: `git remote -v`
- Update if wrong: `git remote set-url origin https://github.com/username/repo.git`

#### "Your branch is behind"
- Pull latest changes: `git pull origin main`
- If conflicts occur, resolve them in VS Code

#### "Nothing to commit"
- Make sure files are saved (Ctrl+S)
- Check if files are staged: `git status`

#### Merge Conflicts
1. VS Code will highlight conflicted files
2. Open the file and look for conflict markers (<<<, ===, >>>)
3. Choose which changes to keep
4. Remove conflict markers
5. Stage and commit the resolved file

### Undoing Changes

#### Undo unstaged changes
```
git checkout -- filename.txt    # Undo changes to specific file
git checkout -- .              # Undo all unstaged changes
```

#### Undo last commit (keep changes)
```
git reset HEAD~1
```

#### Undo last commit (lose changes)
```
git reset --hard HEAD~1
```

## Best Practices

### Commit Messages
- Use present tense: "Add feature" not "Added feature"
- Keep first line under 50 characters
- Be descriptive but concise
- Examples:
  - "Fix login button styling"
  - "Add user authentication system"
  - "Update README with installation instructions"

### When to Commit
- After completing a small feature or fix
- Before switching branches
- At the end of each work session
- When code is in a working state

### Branching Strategy
- Keep `main` branch stable
- Create feature branches for new work:
  ```
  git checkout -b feature/user-login
  git checkout -b fix/navigation-bug
  ```

### Regular Habits
1. **Pull before starting work**: `git pull origin main`
2. **Commit frequently** with meaningful messages
3. **Push regularly** to backup your work
4. **Review changes** before committing

### File Management
- Use `.gitignore` file to exclude:
  - Build files
  - Dependencies (node_modules)
  - IDE settings
  - Sensitive information (passwords, API keys)

## Quick Reference

### Essential Commands
```bash
git status                   # Check what's changed
git add .                   # Stage all changes
git commit -m "message"     # Commit with message
git push origin main        # Push to GitHub
git pull origin main        # Get latest from GitHub
git clone [url]            # Copy repo to local
```

### VS Code Shortcuts
- `Ctrl+Shift+G`: Open Source Control
- `Ctrl+Shift+P`: Command Palette (type "Git:" for Git commands)
- `Ctrl+K Ctrl+O`: Open folder
- `Ctrl+``: Open terminal

## Getting Help

### Resources
- GitHub Docs: https://docs.github.com/
- Git Documentation: https://git-scm.com/doc
- VS Code Git Tutorial: https://code.visualstudio.com/docs/editor/versioncontrol

### VS Code Command Palette
Press `Ctrl+Shift+P` and type "Git:" to see all available Git commands

Remember: Don't be afraid to experiment! Git keeps track of everything, so you can always undo changes. Start with small projects and gradually work up to more complex workflows.